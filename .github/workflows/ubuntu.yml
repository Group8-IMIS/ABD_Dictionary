name: Ubuntu
# QtÂÆòÊñπÊ≤°ÊúâlinuxÂπ≥Âè∞ÁöÑx86ÂåÖ
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on: 
  workflow_dispatch:
  # push:
  #   branches:
  #     - dev
  #     - master
  #   paths-ignore:
  #     - 'docs/**'
  #     - "howto/**"
  #     - "*.md"
  #     - ".clang-format"

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        qt_ver: [5.15.2]
        qt_arch: [gcc_64]
    env:
      version: 23.10.01
      version-suffix: alpha
      prerelease: true
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          
          modules: qtwebengine
      - name: ubuntu install thirdparty dependencies
        run: |
          sudo apt-get install git pkg-config build-essential qt5-qmake 
          sudo apt-get install libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev 
          sudo apt-get install qtdeclarative5-dev libxtst-dev liblzo2-dev libbz2-dev 
          sudo apt-get install libavutil-dev libavformat-dev libeb16-dev
          sudo apt-get install libqt5webkit5-dev libqt5svg5-dev libqt5x11extras5-dev qttools5-dev 
          sudo apt-get install qttools5-dev-tools qtmultimedia5-dev libqt5multimedia5-plugins doxygen libzstd-dev libspeechd-dev #libopencc-dev
          sudo ln -sf /usr/bin/x86_64-linux-gnu-ld.gold /usr/bin/ld
          sudo apt install libxapian-dev
          sudo apt install libfuse2
          git clone https://github.com/BYVoid/OpenCC
          pwd
          cd OpenCC/
          make PREFIX=/usr -j$(nproc)
          sudo make install
          cd ..
          sudo add-apt-repository --yes --update ppa:kiwixteam/release
          sudo apt install libzim-dev
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
          submodules: true

      - name: version-file
        shell: bash
        env:
          VAR_SUFFIX: ${{env.version-suffix}}
          VAR_VERSION: ${{env.version}}
        run: |   
          current_tag=$(git rev-parse --short=8 HEAD)
          release_date=$(date +'%Y%m%d')
          echo "$VAR_VERSION-$VAR_SUFFIX.$release_date.$current_tag">version.txt  
          cat version.txt
          echo "$version"  
          
      - name: build goldendict
        run: |
          qmake CONFIG+=release PREFIX=/usr CONFIG+=zim_support CONFIG+=chinese_conversion_support CONFIG+=use_iconv CONFIG+=use_xapian
          make INSTALL_ROOT=appdir -j`nproc` install; find appdir/

          #copy missing shared dll to appdir.
          mkdir -p appdir/usr/lib
          cp  $(ldd appdir/usr/bin/goldendict | grep -o '\W/[^ ]*' |grep gobject ) appdir/usr/lib
          cp  $(ldd appdir/usr/bin/goldendict | grep -o '\W/[^ ]*' |grep libpango ) appdir/usr/lib

      - name: Build AppImage
        run: |
          sudo apt install fcitx5-frontend-qt5
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
          chmod a+x linuxdeploy-plugin-qt-x86_64.AppImage
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          chmod a+x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --appdir appdir --output appimage --plugin qt  -i redist/icons/goldendict.png -d redist/io.github.xiaoyifang.goldendict_ng.desktop

      - name: changelog
        id: changelog
        run: |   
          previousTag=$(git tag --sort=-creatordate | grep "^v" | sed -n 2p)
          echo "previousTag : $previousTag"
          
          echo "prev_tag=$previousTag" >> $GITHUB_OUTPUT
          echo "curr_tag=$(git tag --sort=-creatordate | grep "^v" | sed -n 1p)" >> $GITHUB_OUTPUT
      - name: Set outputs
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short=8 HEAD)"     >> $GITHUB_OUTPUT
          echo "release_date=$(date +'%Y%m%d')"     >> $GITHUB_OUTPUT
          echo "release_time=$(date +'%H%M%S')"   >> $GITHUB_OUTPUT
          echo "release_time_clock=$(date +'%H:%M:%S')"    >> $GITHUB_OUTPUT
          echo "release_hm=$(date +'%y%m%d')"   >> $GITHUB_OUTPUT
          appname=$(ls *.AppImage* -1|head -n1)
          echo "appname=$appname" >> $GITHUB_OUTPUT

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          commitMode: false
          fromTag: ${{ steps.changelog.outputs.prev_tag }}
          toTag:  "${{ steps.changelog.outputs.curr_tag }}" 
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>üî¥ Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                {
                    "title": "## üöÄ Features",
                    "labels": ["feature","feat","opt"]
                },
                {
                    "title": "## üêõ Fixes",
                    "labels": ["fix","bug"]
                }
                ,
                {
                    "title": "##  ü§ñ  Github action",
                    "labels": ["action"]
                }
                ,
                {
                    "title": "##  üßº  Clean Code",
                    "labels": ["clean"]
                }

              ],
              "label_extractor": [
              {
                "pattern": "([^:]*):.*",
                "target": "$1",
                "on_property": "title",
                "flags": "gu"
              }
            ]
            }           
      - name: uploadRelease
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.vars.outputs.appname }}
          asset_name: ${{ matrix.qt_ver }}-${{ steps.vars.outputs.appname }}
          tag: v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.sha_short }}
          overwrite: true
          release_name: GoldenDict-ng-v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          prerelease: ${{env.prerelease}}
          body: |
            #### Install instructions for Windows, macOS and Linux 

            <https://xiaoyifang.github.io/goldendict-ng/install/>.

            #### Filename pattern (Êñá‰ª∂ÂêçÊ®°Âºè): **[Qt version]-GoldenDict-ng-[OS]-[release-date].[ext]**  

            Qt6.X is recommended for various enhancements.

            Windows users can use either `****-installer.exe` (for installer) or `****.zip` (unzip and run).
            The `goldendict.exe` can be dropped into previous installation's folder (if dependencies aren't changed).

            Linux users can use Flatpak or build from source.
            https://flathub.org/apps/io.github.xiaoyifang.goldendict_ng

            macOS users can use `.dmg` installer.

            `6.5.1-GoldenDict.exe_windows-2019_20230701.zip` means built with Qt6.5.1, windows/msvc-2019 at 20230701 as a zip archive.

            #### Build Details

            AppImage: Ubuntu-20.04
            macOS: macOS-12 and macOS-13
            Windows: Visual studio 2019
            based on: ${{github.ref_name}}


            #### Changes
            
            ${{steps.build_changelog.outputs.changelog}}
